apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: "androidx.navigation.safeargs.kotlin"
import java.text.SimpleDateFormat

def safeExtGet(prop, key, fallback) {
    if (rootProject.ext.has(prop)) {
        def map = rootProject.ext.get(prop)
        if (map.containsKey(key)) {
            return map.get(key)
        }
    }
    return fallback
}


// add the maven publish script if existed
def maven_gradle_path = "${rootDir.absolutePath}/../products/script/maven.gradle"
if (new File(maven_gradle_path).exists()) {
    apply from: maven_gradle_path
}

// special the version using when publishing to maven
// the group name is defined in setting.gradle
project.group="io.github.agoraio-usecase.meeting"
project.version="${safeExtGet('meeting_sdk', 'versionName', '1.0.0')}"
project.description = "AgoraMeetingUi"
project.ext.url = "https://bitbucket.agoralab.co/projects/ADUC/repos/cloudmeeting-android/browse/AgoraMeeting_Android/meeting-ui?at=refs%2Fheads%2Fdev%2Fandroid_210114"

android {
    compileSdkVersion safeExtGet('android', 'compileSdkVersion', 29)
    buildToolsVersion safeExtGet('android', 'buildToolsVersion', '29.0.3')

    defaultConfig {
        minSdkVersion safeExtGet('android', 'minSdkVersion', 19)
        targetSdkVersion safeExtGet('android', 'minSdkVersion', 29)
        versionCode safeExtGet('meeting_sdk', 'versionCode', 1)
        versionName safeExtGet('meeting_sdk', 'versionName', '1.0.0')

        vectorDrawables.useSupportLibrary = true
        consumerProguardFiles 'consumer-rules.pro'
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField 'String', 'BUILD_TIME', "\"${new SimpleDateFormat("yyyy.MM.dd").format(new Date())}\""
        buildConfigField 'String', 'RTC_VERSION', "\"${safeExtGet('dependencies', 'com.github.agorabuilder:native-full-sdk', '3.2.1')}\""
        buildConfigField 'String', 'RTM_VERSION', "\"${safeExtGet('dependencies', 'com.github.agorabuilder:rtm-sdk', '1.2.2')}\""
        buildConfigField 'String', 'WHITEBOARD_VERSION', "\"${safeExtGet('dependencies', 'com.github.netless-io:whiteboard-android', '2.6.4')}\""
    }

    viewBinding {
        enabled = true
    }
    dataBinding {
        enabled = true
    }

    sourceSets {
        main {
            java.srcDirs 'src/main/java','src/main/kotlin'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions { jvmTarget = 1.8 }
}

dependencies {
    // Meeting Basic Component
    implementation "io.github.agoraio-usecase.meeting:meeting-context:${safeExtGet('maven_version', 'io.github.agoraio-usecase.meeting:meeting-context', '1.0.0')}"
    implementation "io.github.agoraio-usecase.meeting:whiteboard:${safeExtGet('maven_version', 'io.github.agoraio-usecase.meeting:whiteboard', '1.0.0')}"

    // Kotlin basic dependencies
    implementation "org.jetbrains.kotlin:kotlin-stdlib:${safeExtGet('dependencies', 'org.jetbrains.kotlin:kotlin-stdlib', '1.4.21')}"
    implementation "androidx.core:core-ktx:${safeExtGet('dependencies', 'androidx.core:core-ktx', '1.3.2')}"

    // Test FrameWork
    testImplementation "junit:junit:${safeExtGet('dependencies', 'junit:junit', '4.13.1')}"
    androidTestImplementation "androidx.test.ext:junit:${safeExtGet('dependencies', 'androidx.test.ext:junit', '1.1.1')}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${safeExtGet('dependencies', 'androidx.test.espresso:espresso-core', '3.2.0')}"

    // UI Component -- android
    implementation "androidx.appcompat:appcompat:${safeExtGet('dependencies', 'androidx.appcompat:appcompat', '1.1.0')}"
    implementation "androidx.constraintlayout:constraintlayout:${safeExtGet('dependencies', 'androidx.constraintlayout:constraintlayout', '1.1.3')}"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:${safeExtGet('dependencies', 'androidx.swiperefreshlayout:swiperefreshlayout', '1.0.0')}"
    implementation "androidx.navigation:navigation-fragment:${safeExtGet('dependencies', 'androidx.navigation:navigation-fragment', '2.2.2')}"
    implementation "androidx.navigation:navigation-ui:${safeExtGet('dependencies', 'androidx.navigation:navigation-ui', '2.2.2')}"
    api "androidx.navigation:navigation-common:${safeExtGet('dependencies', 'androidx.navigation:navigation-common', '2.2.2')}"
    implementation "androidx.navigation:navigation-fragment-ktx:${safeExtGet('dependencies', 'androidx.navigation:navigation-fragment', '2.2.2')}"
    implementation "androidx.navigation:navigation-ui-ktx:${safeExtGet('dependencies', 'androidx.navigation:navigation-ui', '2.2.2')}"
    implementation "androidx.lifecycle:lifecycle-extensions:${safeExtGet('dependencies', 'androidx.lifecycle:lifecycle-extensions', '2.2.0')}"
    implementation "androidx.recyclerview:recyclerview:${safeExtGet('dependencies', 'androidx.recyclerview:recyclerview', '1.1.0')}"
    implementation "com.google.android.material:material:${safeExtGet('dependencies', 'com.google.android.material:material', '1.1.0')}"
    implementation "androidx.preference:preference:${safeExtGet('dependencies', 'androidx.preference:preference', '1.1.1')}"

    // UI Component -- third part
    implementation "com.yanzhenjie:permission:${safeExtGet('dependencies', 'com.yanzhenjie:permission', '2.0.3')}"
    implementation "com.github.QuadFlask:colorpicker:${safeExtGet('dependencies', 'com.github.QuadFlask:colorpicker', '0.0.15')}"
    implementation "io.github.jeremyliao:live-event-bus-x:${safeExtGet('dependencies', 'io.github.jeremyliao:live-event-bus-x', '1.8.0')}"
    implementation "q.rorbin:badgeview:${safeExtGet('dependencies', 'q.rorbin:badgeview', '1.1.3')}"
    implementation "com.github.bumptech.glide:glide:${safeExtGet('dependencies', 'com.github.bumptech.glide:glide', '4.12.0')}"
    annotationProcessor "com.github.bumptech.glide:compiler:${safeExtGet('dependencies', 'com.github.bumptech.glide:compiler', '4.12.0')}"
    implementation "com.contrarywind:wheelview:${safeExtGet('dependencies', 'com.contrarywind:wheelview', '4.1.0')}"
}
