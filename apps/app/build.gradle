import java.text.SimpleDateFormat

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: "androidx.navigation.safeargs"

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    viewBinding {
        enabled = true
    }
    dataBinding {
        enabled = true
    }

    defaultConfig {
        applicationId "io.agora.meeting"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.meeting_app.versionCode
        versionName rootProject.ext.meeting_app.versionName

        vectorDrawables.useSupportLibrary = true

        buildConfigField 'String', 'BUILD_TIME', "\"${new SimpleDateFormat("yyyy.MM.dd").format(new Date())}\""

        ndk {
            abiFilters 'armeabi-v7a', 'x86'//, 'arm64-v8a'
        }
    }

    signingConfigs {
        release {
            def prpe = new Properties()
            def input = project.rootProject.file('local.properties').newInputStream();
            prpe.load(input)
            storeFile prpe.getProperty('sign.store.file') == null ? signingConfigs.debug.storeFile : new File(prpe.getProperty('sign.store.file'))
            storePassword prpe.getProperty('sign.store.password') == null ? signingConfigs.debug.storePassword : prpe.getProperty('sign.store.password')
            keyAlias prpe.getProperty('sign.alias') == null ? signingConfigs.debug.keyAlias : prpe.getProperty('sign.alias')
            keyPassword prpe.getProperty('sign.alias.password') == null ? signingConfigs.debug.keyPassword : prpe.getProperty('sign.alias.password')
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            //applicationIdSuffix ".debug"
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "oritation"
    productFlavors {
        port {
            dimension "oritation"
        }
        land {
            dimension "oritation"
            applicationIdSuffix ".land"
            versionNameSuffix "-land"
        }
    }

    sourceSets {
        main {
            java.srcDirs 'src/main/java','src/main/kotlin'
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }


}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    // Meeting Component
    implementation rootProject.findProject(':meeting-sdk') != null ? project(':meeting-sdk') : "io.github.agoraio-usecase.meeting:meeting-sdk:${rootProject.ext.maven_version['io.github.agoraio-usecase.meeting:meeting-sdk']}"
    implementation rootProject.findProject(':rtmtoken') != null ? project(':rtmtoken') : "io.github.agoraio-usecase.meeting:rtmtoken:${rootProject.ext.maven_version['io.github.agoraio-usecase.meeting:rtmtoken']}"
    implementation rootProject.findProject(':statistic') != null ? project(':statistic') : "io.github.agoraio-usecase.tools:statistic:${rootProject.ext.maven_version['io.github.agoraio-usecase.tools:statistic']}"

    // Kotlin basic dependencies
    implementation "org.jetbrains.kotlin:kotlin-stdlib:${rootProject.ext.dependencies['org.jetbrains.kotlin:kotlin-stdlib']}"
    implementation "androidx.core:core-ktx:${rootProject.ext.dependencies['androidx.core:core-ktx']}"

    // Net Component
    implementation "com.squareup.retrofit2:retrofit:${rootProject.ext.dependencies['com.squareup.retrofit2:retrofit']}"
    implementation "com.squareup.retrofit2:converter-gson:${rootProject.ext.dependencies['com.squareup.retrofit2:converter-gson']}"
    implementation "com.squareup.okhttp3:logging-interceptor:${rootProject.ext.dependencies['com.squareup.okhttp3:logging-interceptor']}"

    // UI Component -- Android
    implementation "androidx.appcompat:appcompat:${rootProject.ext.dependencies['androidx.appcompat:appcompat']}"
    implementation "com.google.android.material:material:${rootProject.ext.dependencies['com.google.android.material:material']}"
    implementation "androidx.constraintlayout:constraintlayout:${rootProject.ext.dependencies['androidx.constraintlayout:constraintlayout']}"
    implementation "androidx.preference:preference:${rootProject.ext.dependencies['androidx.preference:preference']}"
    implementation "androidx.preference:preference-ktx:${rootProject.ext.dependencies['androidx.preference:preference-ktx']}"

    // UI Component -- Third part
    implementation "com.github.razerdp:BasePopup:${rootProject.ext.dependencies['com.github.razerdp:BasePopup']}"

    // Test Framework
    debugImplementation "com.squareup.leakcanary:leakcanary-android:${rootProject.ext.dependencies['com.squareup.leakcanary:leakcanary-android']}"

}
